import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import beta

#%%
BANDIT_PROBABILITIES = [0.2, 0.55, 0.75]
NUM_TRIALS = 10_000
EPS = 0.1

class Bandit:
    def __init__(self, p):
        self.p = p
        self.a = 1
        self.b = 1
        self.N = 0

    def pull(self):
        return np.random.random() < self.p

    def sample(self):
        return np.random.beta(self.a, self.b)

    def update(self, x):
        # Number of successful pulls
        self.a += x
        # Number of unsuccessful pulls
        self.b += 1 - x
        self.N += 1

def plot(bandits, trial):
    plt.figure()
    x = np.linspace(0, 1, 200)
    for b in bandits:
        y = beta.pdf(x, b.a, b.b)
        plt.plot(x, y, label=f"real p: {b.p:.4f}, win rate = {b.a - 1}/{b.N}")
    plt.title(f"Bandit distributions after {trial} trials")
    plt.legend()
    plt.show()

def experiment():
    bandits = [Bandit(p) for p in BANDIT_PROBABILITIES]
    optimal_j = np.argmax(BANDIT_PROBABILITIES)
    sample_points = [5, 10, 20, 50, 100, 200, 500, 1000, 1500, 1999]
    num_times_explored = 0
    num_times_exploited = 0
    num_optimal = 0
    rewards = np.zeros(NUM_TRIALS)
    for i in range(NUM_TRIALS):
        j = np.argmax([b.sample() for b in bandits])

        # plot the posteriors
        if i in sample_points:
            plot(bandits, i)

        if j==optimal_j:
            num_optimal += 1

        x = bandits[j].pull()
        bandits[j].update(x)
        rewards[i] = x

    j = np.argmax([b.sample() for b in bandits])
    print("Best bandit: ", bandits[j].a, bandits[j].b, bandits[j].N)

    print("Number times explored: ",num_times_explored)
    print("Number times exploited : ", num_times_exploited )
    print("Total reward earned: ", rewards.sum())
    print("Win rate: ", rewards.sum()/NUM_TRIALS)
    print("Selected optimal bandit: ", num_optimal)


if __name__ == "__main__":
    experiment()
