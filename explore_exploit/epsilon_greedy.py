import random
import numpy as np

#%%
BANDIT_PROBABILITIES = [0.2, 0.5, 0.65, 0.70]
NUM_TRIALS = 100_000
EPS = 0.1

class Bandit:
    def __init__(self, p):
        self.p = p
        self.p_estimate = 0
        self.N = 0

    def pull(self):
        return random.random() < self.p

    def update(self, x):
        self.N = self.N + 1
        self.p_estimate = ((self.N-1)*self.p_estimate + x)/self.N


def eps(eps_0, t, a, b=1, c=1, eps_min=0.01, method=0):
    if method == 0:
        return a*eps_0/t
    elif method == 1:
        return max(eps_0 - a*t, eps_min)
    elif method == 2:
        return eps_0 * a**t
    elif method == 3:
        return a/np.log(b*t+c)


def experiment():
    bandits = [Bandit(p) for p in BANDIT_PROBABILITIES]
    optimal_j = np.argmax(BANDIT_PROBABILITIES)

    num_times_explored = 0
    num_times_exploited = 0
    num_optimal = 0
    rewards = np.zeros(NUM_TRIALS)
    for i in range(NUM_TRIALS):
        prob = random.random()
        if prob < eps(EPS, i+1, 0.999, method=2):
            num_times_explored += 1
            j = random.randint(0,len(bandits)-1)
        else:
            num_times_exploited += 1
            j = np.argmax([b.p_estimate for b in bandits])

        if j==optimal_j:
            num_optimal += 1

        x = bandits[j].pull()
        bandits[j].update(x)
        rewards[i] = x

    j = np.argmax([b.p_estimate for b in bandits])
    print("Best bandit: ", bandits[j].p_estimate)

    print("Number times explored: ",num_times_explored)
    print("Number times exploited : ", num_times_exploited )
    print("Total reward earned: ", rewards.sum())
    print("Win rate: ", rewards.sum()/NUM_TRIALS)
    print("Selected optimal bandit: ", num_optimal)

    for i,b in enumerate(bandits):
        print(f"Mean of bandit {i}: ", b.p_estimate)


if __name__ == "__main__":
    experiment()
